name: Deploy Java Spring Boot App to Render

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: prod

    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: "17"
          distribution: "temurin"
          cache: maven

      # Step 3: Build with Maven
      - name: Build with Maven
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: mvn clean package -DskipTests --file pom.xml

      # Step 4: Set up Docker (for building images)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 5: Build Docker image (if Docker is used for deployment)
      - name: Build Docker image
        run: |
          docker build -t my-app .

      # Step 6: Log in to Docker Hub and push the Docker image
      - name: Log in to Docker Hub and push image
        run: |
          docker login --username ${{ secrets.DOCKER_USERNAME }} --password ${{ secrets.DOCKER_PASSWORD }}
          docker tag my-app ${{ secrets.DOCKER_USERNAME }}/meetx:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/meetx:latest

      # Step 7: Install Render CLI
      - name: Install Render CLI
        run: npm install -g render-cli

      # Step 8: Verify Render CLI installation
      - name: Verify Render CLI installation
        run: render --version

      # Step 9: Deploy to Render using Docker
      - name: Deploy to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          render deploy --service meetX --docker --branch master --env prod
